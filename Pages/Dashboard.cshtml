@page
@using FinanceTracker.Pages
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/css/DashboardStyles.css">
    <link rel="icon" type="image/png" sizes="32x24" href="..\images\BudgedBuddyTranspSmol32pxWide.png">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/js/site.js" defer></script>
</head>

<body>
    <header class="header">
        <div class="menu-icon" onclick="toggleMenu()">
            <div class="bar bar1"></div>
            <div class="bar bar2"></div>
            <div class="bar bar3"></div>
        </div>

        <div class="menu" id="menu">
            <a href="Dashboard">Dashboard</a>
            <a href="Investments">Investments</a>
            <a href="Budget">Budget</a>
            <a href="Transactions">Transactions</a>
            <a href="#Contact">Contact</a>
            <div class="Copyright-ham-footer">
                <p>&copy; 2024 Budget Buddy. All rights reserved.</p>
            </div>
        </div>

        <div class="user-options">
            <div class="login-button">
                <span onclick='onclick=location.href = "/UserSettings"'>@Model.WebUser?.Name</span>
            </div>
            <div class="dropdown">
                <span id="settings">Options</span>
                <div class="dropdown-content">
                    <a href="/UserSettings">Profile</a>
                    <a href="#settings">Settings</a>
                    <a href="/Logout">Logout</a>
                </div>
            </div>
        </div>
    </header>

    <div class="Dashboard">
        <div class="account-wrapper">


            @* <div class="Chart-Container">
            <div class="expense-Chart">
            <canvas id="expensePieChart"></canvas>
            </div>
            <div class="Investment-Chart">
            <canvas id="investmentLineChart"></canvas>
            </div>
            </div>
            <div class="Transaction-History-Chart">
            <canvas id="transactionBarChart"></canvas>
            </div> *@

            @if (Model.WebUser == null || !Model.WebUser.HasFinancialAccounts())
            {
                <div class="nothing-here-text">
                    <p>Nothing Here yet...</p>
                    <p>Try adding a Bank account, Wallet, cash etc.</p>
                </div>

                <div class="add-new-financialAccount-field" onclick="addAccountWindow()">
                    <button class="add-new-fin-acc-plus">+</button>
                </div>

                <div class="add-new-acc-background" id="new-acc-menu">
                    <div class="add-new-acc-menu">
                        <button class="exit-btn" onclick="closeAccountMenu()">X</button>
                        <form method="post">
                            <select name="AccountType" id="Account-Type" class="Account-Type-Select" required>
                                <option value="" disabled selected></option>
                                <option value="BankAccount">Bank Account</option>
                                <option value="Cash">Cash</option>
                                <option value="Portfolio">Portfolio</option>
                                <option value="CryptoWallet">Crypto Wallet</option>
                            </select>

                            <input type="text" name="AccountName" class="Account-Name-Input" required>

                            <select name="Currency" id="Curreny-Select" class="Currency-Select" required>
                                @foreach (CurrencyType currency in Enum.GetValues(typeof(CurrencyType)))
                                {
                                    <option value="@currency">@currency</option>
                                }
                            </select>
                            <input type="submit" class="submit-Financial-Account-btn" asp-page-handler="AddFinanceAccount">
                        </form>
                    </div>
                </div>
            }
            else
            {

                foreach (var bankAccount in Model.WebUser.BankAccounts)
                {
                    <div class="Bank-Acc-Container">
                        <h3>Bankaccount: @bankAccount.AccountName</h3>
                        <p>Balance: @bankAccount.Balance @bankAccount.Currency</p>

                        <button type="button" class="quickadd-transaction-btn" data-id="@bankAccount.ID" onclick="addTransactionWindow(this)" >+</button>
                    </div>
                }


                foreach (var cashAccount in Model.WebUser.CashAccounts)
                {
                    <div class="Cash-Acc-Container">
                        <h3>Cashstash @cashAccount.AccountName</h3>
                        <p>Balance: @cashAccount.Balance @cashAccount.Currency</p>

                        <button type="button" class="quickadd-transaction-btn" onclick="addTransactionWindow()">+</button>
                    </div>
                }

                foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                {
                    <div class="Crypto-Wallet-Container">
                        <h3>Cryptowallet: @cryptoWallet.AccountName</h3>
                        <p>Balance: @cryptoWallet.Balance</p>

                        <button type="button" class="quickadd-transaction-btn" onclick="addTransactionWindow()">+</button>
                    </div>
                }

                foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                {
                    <div class="Crypto-Wallet-Container">
                        <h3>Stockportoflio: @portfolioAccount.AccountName</h3>
                        <p>Balance: @portfolioAccount.Balance</p>

                        <button type="button" class="quickadd-transaction-btn" onclick="addTransactionWindow()">+</button>
                    </div>
                }

                <div class="spacer"></div>



                <div class="add-new-financialAccount-field" onclick="addAccountWindow()">
                    <button class="add-new-fin-acc-plus">+</button>
                </div>

                <div class="add-new-acc-background" id="new-acc-menu">
                    <div class="add-new-acc-menu">
                        <button class="exit-btn" onclick="closeAccountMenu()">X</button>
                        <form method="post">
                            <select name="AccountType" id="Account-Type" class="Account-Type-Select" required>
                                <option value="" disabled selected></option>
                                <option value="BankAccount">Bank Account</option>
                                <option value="Cash">Cash</option>
                                <option value="Portfolio">Portfolio</option>
                                <option value="CryptoWallet">Crypto Wallet</option>
                            </select>

                            <input type="text" name="AccountName" class="Account-Name-Input" required>

                            <select name="Currency" id="Curreny-Select" class="Currency-Select" required>
                                @foreach (CurrencyType currency in Enum.GetValues(typeof(CurrencyType)))
                                {
                                    <option value="@currency">@currency</option>
                                }
                            </select>
                            <input type="submit" class="submit-Financial-Account-btn" asp-page-handler="AddFinanceAccount">
                        </form>
                    </div>
                </div>

                <div class="qick-add-transaction-container" id="qick-add-transaction-container">
                    <div class="qick-add-transaction-menu">
                        <button class="exit-btn" onclick="closeTransactionWindow()">X</button>
                        <form method="post">
                            
                            <input type="hidden" name="AccID" id="account-id" />
                            

                            <div class="trans-type-slct-container" id="trans-type-slct-container">

                                <label for="trans-type-slct">Transaction Type</label>
                                <select class="trans-type-slct" id="trans-type-slct" name="TransactionType" required>
                                    <option value="" selected disabled></option>
                                    <option value="Income">Income</option>
                                    <option value="Expense">Expense</option>
                                    <option value="Transfer">Transfer</option>
                                </select>
                            </div>

                            <div class="trans-transf-input-container">
                                <div class="transf-origin-container">
                                    <label for="transf-origin-slct">From:</label>
                                    <select name="Origin" id="transf-orgini-slct" >
                                        
                                        @foreach (var bankAccount in Model.WebUser.BankAccounts)
                                        {
                                            <option value="@bankAccount.ID">Bankaccount: "@bankAccount.AccountName"</option>
                                        }
                                        @foreach (var cashAccount in Model.WebUser.CashAccounts)
                                        {
                                            <option value="@cashAccount.ID">Cash: "@cashAccount.AccountName"</option>
                                        }
                                        @foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                                        {
                                            <option value="@cryptoWallet.ID">Cryptowallet: "@cryptoWallet.AccountName"</option>
                                        }
                                        @foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                                        {
                                            <option value="@portfolioAccount.ID">Portfolio: "@portfolioAccount.AccountName"
                                            </option>
                                        }
                                    </select>
                                </div>

                                <div class="transf-destination-container">
                                    <label for="transf-destination-slct">To:</label>
                                    <select name="Destination" id="transf-destination-slct" >
                                        <option value="" disabled selected></option>
                                        @foreach (var bankAccount in Model.WebUser.BankAccounts)
                                        {
                                            <option value="@bankAccount.ID">Bankaccount: "@bankAccount.AccountName"</option>
                                        }
                                        @foreach (var cashAccount in Model.WebUser.CashAccounts)
                                        {
                                            <option value="@cashAccount.ID">Cash: "@cashAccount.AccountName"</option>
                                        }
                                        @foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                                        {
                                            <option value="@cryptoWallet.ID">Cryptowallet: "@cryptoWallet.AccountName"</option>
                                        }
                                        @foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                                        {
                                            <option value="@portfolioAccount.ID">Portfolio: "@portfolioAccount.AccountName"
                                            </option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="trans-income-expense-inputs-container">
                                <div class="trans-category-container">
                                    <label for="trans-category-slct">Category</label>
                                    <select name="Category" id="trans-category-slct" required>
                                        <option value="" disabled selected></option>
                                        <option value="Salary" data-type="Income">Salary</option>
                                        <option value="Freelance/Consulting" data-type="Income">Freelance/Consulting
                                        </option>
                                        <option value="Investments" data-type="Income">Investments</option>
                                        <option value="Rental Income" data-type="Income">Rental Income</option>
                                        <option value="Business Income" data-type="Income">Business Income</option>
                                        <option value="Bonuses" data-type="Income">Bonuses</option>
                                        <option value="Gifts" data-type="Income">Gifts</option>
                                        <option value="Interest Earned" data-type="Income">Interest Earned</option>
                                        <option value="Dividends" data-type="Income">Dividends</option>
                                        <option value="Other Income" data-type="Income">Other Income</option>

                                        <option value="Rent/Mortgage" data-type="Expense">Rent/Mortgage</option>
                                        <option value="Utilities (Electricity, Water, Gas)" data-type="Expense">Utilities
                                            (Electricity, Water, Gas)</option>
                                        <option value="Groceries" data-type="Expense">Groceries</option>
                                        <option value="Dining Out" data-type="Expense">Dining Out</option>
                                        <option value="Transportation (Fuel, Public Transport)" data-type="Expense">
                                            Transportation (Fuel, Public Transport)</option>
                                        <option value="Insurance (Health, Car, Home)" data-type="Expense">Insurance (Health,
                                            Car, Home)</option>
                                        <option value="Medical/Healthcare" data-type="Expense">Medical/Healthcare</option>
                                        <option value="Education (Tuition, Books)" data-type="Expense">Education (Tuition,
                                            Books)</option>
                                        <option value="Entertainment (Movies, Events)" data-type="Expense">Entertainment
                                            (Movies, Events)</option>
                                        <option value="Subscriptions (Netflix, Gym)" data-type="Expense">Subscriptions
                                            (Netflix, Gym)</option>
                                        <option value="Travel (Flights, Hotels)" data-type="Expense">Travel (Flights,
                                            Hotels)</option>
                                        <option value="Clothing" data-type="Expense">Clothing</option>
                                        <option value="Personal Care (Haircuts, Spa)" data-type="Expense">Personal Care
                                            (Haircuts, Spa)</option>
                                        <option value="Household Supplies" data-type="Expense">Household Supplies</option>
                                        <option value="Debt Payments (Credit Card, Loans)" data-type="Expense">Debt Payments
                                            (Credit Card, Loans)</option>
                                        <option value="Savings/Investments" data-type="Expense">Savings/Investments</option>
                                        <option value="Charitable Donations" data-type="Expense">Charitable Donations
                                        </option>
                                        <option value="Pet Care" data-type="Expense">Pet Care</option>
                                        <option value="Childcare" data-type="Expense">Childcare</option>
                                        <option value="Miscellaneous" data-type="Expense">Miscellaneous</option>

                                        <option value="Bank Transfer" data-type="Transfer">Bank Transfer</option>
                                        <option value="Cash Withdrawal" data-type="Transfer">Cash Withdrawal</option>
                                        <option value="Cash Deposit" data-type="Transfer">Cash Deposit</option>
                                        <option value="Crypto Purchase" data-type="Transfer">Crypto Purchase</option>
                                        <option value="Crypto Sale" data-type="Transfer">Crypto Sale</option>
                                        <option value="Internal Transfer" data-type="Transfer">Internal Transfer</option>
                                        <option value="External Transfer" data-type="Transfer">External Transfer</option>
                                        <option value="Credit Card Payment" data-type="Transfer">Credit Card Payment
                                        </option>
                                        <option value="Loan Payment" data-type="Transfer">Loan Payment</option>
                                        <option value="Peer-to-Peer Transfer" data-type="Transfer">Peer-to-Peer Transfer
                                        </option>
                                        <option value="Savings to Checking" data-type="Transfer">Savings to Checking
                                        </option>
                                        <option value="Checking to Savings" data-type="Transfer">Checking to Savings
                                        </option>
                                        <option value="Investment to Savings" data-type="Transfer">Investment to Savings
                                        </option>
                                        <option value="Savings to Investment" data-type="Transfer">Savings to Investment
                                        </option>
                                    </select>
                                </div>
                                <div class="trans-description-container">
                                    <label for="trans-income-description-inp">Description</label>
                                    <input type="text" class="trans-description" id="trans-description-inp"
                                        name="Description" required>
                                </div>
                                <div class="trans-amount-container">
                                    <label for="trans-amount-inp">Amount</label>
                                    <input type="number" class="trans-amount-inp" id="trans-amount-inp" name="Amount"
                                        step="any" required>
                                </div>

                                <div class="trans-date-container">
                                    <label for="trans-date-inp">Date</label>
                                    <input type="datetime-local" class="trans-date-inp" id="trans-date-inp" name="Date" required>
                                </div>

                                <div class="trans-contract-container">
                                    <label for="trans-contract-checkbox">Contract</label>
                                    <input type="checkbox" name="Contract" id="trans-contract-checkbox" >
                                </div>

                                <div class="trans-contract-cycle-container">
                                    <label for="contract-cycle-slct">Contract cycle</label>
                                    <select name="ContractCycle" id="contract-cycle-slct" required>

                                        @foreach(BillingCycle billingCycle in Enum.GetValues(typeof(BillingCycle)))
                                        {   
                                            <option value="@billingCycle">@billingCycle</option>
                                        }
                                        
                                        @* <option value="730">Biannually</option>
                                        <option value="365">Annually</option>
                                        <option value="183">Semi-annually</option>
                                        <option value="91">Quarterly</option>
                                        <option value="60">Bimonthly</option>
                                        <option value="30">Monthly</option>
                                        <option value="14">Biweekly</option>
                                        <option value="7">Weekly</option>
                                        <option value="1">Daily</option> *@
                                    </select>
                                </div>
                            </div>
                            <div class="save-transaction-container">
                                <button type="submit" class="save-transaction-btn" id="save-transaction-btn" asp-page-handler="AddTransaction">✅</button>
                            </div>
                        </form>
                    </div>
                </div>
            }
            <script>
                function addAccountWindow() {
                    document.getElementById('new-acc-menu').classList.toggle("visible");

                    
                }

                function closeAccountMenu() {
                    document.getElementById('new-acc-menu').classList.toggle("visible");
                }


                function addTransactionWindow(button) {
                    document.getElementById('qick-add-transaction-container').classList.toggle("visible");

                    const accountID = button.getAttribute('data-id');
                    document.getElementById('account-id').value = accountID;


                }

                function closeTransactionWindow() {
                    document.getElementById('qick-add-transaction-container').classList.toggle("visible");
                }



                document.addEventListener("DOMContentLoaded", function () {
                    const transactionTypeSelect = document.getElementById('trans-type-slct');
                    const categorySelect = document.getElementById('trans-category-slct');
                    const transferInputContainer = document.querySelector('.trans-transf-input-container');
                    const contractCheckbox = document.getElementById('trans-contract-checkbox');
                    const contractCycleDiv = document.querySelector('.trans-contract-cycle-container');
                    const transferOriginSelect = document.getElementById('transf-orgini-slct');
                    const transferDestinationSelect = document.getElementById('transf-destination-slct');

                    // Function to filter categories based on transaction type
                    function filterCategories() {
                        const selectedType = transactionTypeSelect.value;
                        const options = categorySelect.querySelectorAll('option');

                        options.forEach(option => {
                            if (option.value === "") {
                                option.style.display = "block";
                            } else {
                                const dataType = option.getAttribute('data-type');
                                if (selectedType === "Transfer") {
                                    option.style.display = dataType === "Transfer" ? "block" : "none";
                                } else {
                                    option.style.display = dataType === selectedType ? "block" : "none";
                                }
                            }
                        });
                    }

                    // Event listener for transaction type change
                    transactionTypeSelect.addEventListener('change', function () {
                        filterCategories();

                        if (this.value === "Transfer") {
                            transferInputContainer.style.display = "block";
                        } else {
                            transferInputContainer.style.display = "none";
                        }
                    });

                    // Event listener for contract checkbox change
                    contractCheckbox.addEventListener('change', function () {
                        if (this.checked) {
                            contractCycleDiv.style.display = "block";
                        } else {
                            contractCycleDiv.style.display = "none";
                        }
                    });

                    // Function to unselect the same option in the other select
                    @* function unselectSameOption(event) {
                        const originValue = transferOriginSelect.value;
                        const destinationValue = transferDestinationSelect.value;

                        if (event.target.id === 'transf-orgini-slct' && originValue === destinationValue) {
                            transferDestinationSelect.value = "";
                        } else if (event.target.id === 'transf-destination-slct' && originValue === destinationValue) {
                            transferOriginSelect.value = "";
                        }
                    }

                    // Event listeners for transfer selects
                    transferOriginSelect.addEventListener('change', unselectSameOption);
                    transferDestinationSelect.addEventListener('change', unselectSameOption); *@

                    // Initialize the form based on default values
                    filterCategories();
                    transferInputContainer.style.display = transactionTypeSelect.value === "Transfer" ? "block" : "none";
                    contractCycleDiv.style.display = contractCheckbox.checked ? "block" : "none";
                });
            </script>

            @* <script>



            expenseChart();

            investmentChart();


            var ctx = document.getElementById('transactionBarChart').getContext('2d');
            var transactionBarChart = new Chart(ctx, {
            type: 'bar',
            data: {
            labels: ['Groceries', 'Rent', 'Utilities', 'Entertainment', 'Dining', 'Miscellaneous'],
            datasets: [{
            label: 'Transactions',
            data: [300, 500, 100, 200, 150, 80],
            backgroundColor: [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)',
            'rgba(153, 102, 255, 0.2)',
            'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)',
            'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
            }]
            },
            options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
            legend: {
            display: true,
            position: 'bottom',
            labels: {
            color: '#ffffff'
            }
            },
            scales: {
            x: {
            ticks: {
            color: '#ffffff'
            }
            },
            y: {
            ticks: {
            color: '#ffffff'
            }
            }
            }
            }
            }
            });




            function addAccountWindow() {
            document.getElementById('new-acc-menu').classList.toggle("visible");
            }

            function closeAccountMenu() {
            document.getElementById('new-acc-menu').classList.toggle("visible");
            }

            </script> *@

        </div>
    </div>
    <footer>
        <p>&copy; 2024 Budget Buddy. All rights reserved.</p>
    </footer>
</body>

</html>