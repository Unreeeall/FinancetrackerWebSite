@page
@using Database
@using Transactions
@model AccountOverviewModel
@{
    ViewData["Title"] = "AccountOverview";
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AccountOverview</title>
    <link rel="stylesheet" href="/css/AccountOverview.css">
    <link rel="icon" type="image/png" sizes="32x24" href="..\images\BudgedBuddyTranspSmol32pxWide.png">
    <script src="/js/site.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/js/accountOverview.js"></script>
</head>

<body>
    <header class="header">
    <div class="menu-icon" onclick="toggleMenu()" tabIndex="0" role="button">
        <div class="bar bar1"></div>
        <div class="bar bar2"></div>
        <div class="bar bar3"></div>
    </div>

    <div class="menu" id="menu">
        <div class="menu-top-spacer"></div>
        <div class="menu-dashbard-box">
            <a href="Dashboard">Dashboard</a>
        </div>
        <div class="menu-Investment-box">
            <a >Investments</a>
        </div>
        <div class="menu-budget-box">
            <a >Budget</a>
        </div>
        <div class="menu-transaction-box">
            <a >Transactions</a>    
        </div>
        <div class="menu-contact-box">
            <a href="#Contact">Contact</a>
        </div>
        <div class="Copyright-ham-footer">
            <p>&copy; 2024 Budget Buddy. All rights reserved.</p>
        </div>
    </div>

    <div class="time-range-container">
        <div class="time-selector">
            <button id="prev">&lt;</button>
            <span id="timeframe"></span>
            <button id="next">&gt;</button>
        </div>
        <div class="range-type-slc-box">
            <select id="rangeType">
                <option value="week">Week</option>
                <option value="month">Month</option>
                <option value="year">Year</option>
            </select>
        </div>
        
    </div>

    <div class="user-options">
        <div class="login-button">
            <span onclick='onclick=location.href = "/UserSettings"' tabIndex="-1" role="button">@Model.WebUser?.Name</span>
        </div>
        <div class="dropdown">
            <span id="settings">Options</span>
            <div class="dropdown-content">
                <a href="#profile">Profile</a>
                <a href="#settings">Settings</a>
                <a href="/Logout">Logout</a>
            </div>
        </div>
    </div>
    </header>
    <div class="Dashboard">
        @if (Model.WebUser == null || !Model.WebUser.HasFinancialAccounts())
        {
            <div class="nothing-here-text">
                <p>Nothing Here yet...</p>
                <p>Try adding a Bank account, Wallet, cash etc.</p>
            </div>
        }
        else
        {


            <div class="accountOverview-container">
                <h1 class="Account-Name-H1">@Model.financialAccount?.AccountName</h1>
                @if (Model.financialAccount is BankAccount bankAccount)
                {
                    <p class="Account-Balance-p">@bankAccount.Balance @bankAccount.Currency</p>

                }
                else if (Model.financialAccount is CashAccount cashAccount)
                {
                    <p>@cashAccount.Balance @cashAccount.Currency</p>
                }
                else if (Model.financialAccount is CryptoWallet cryptoWallet)
                {
                    <p>Wallet Address: @cryptoWallet.AccountName</p>
                }
                else if (Model.financialAccount is PortfolioAccount portfolioAccount)
                {
                    <p>Portfolio Name: @portfolioAccount.AccountName</p>

                }
            </div>


            <div class="accountBlanceChart-Container">
                <canvas id="accountBalanceChart" width="400" height="200"></canvas>
            </div>

            <div class="in-ex-charts-container">
                <div class="expensesByCategoryChart-container">
                    <h2>Expenses</h2>
                    <h2>Total: <span id="totalExpense"></span></h2>
                    <canvas id="expensesByCategoryChart" width="400" height="200"></canvas>

                </div>

                <div class="incomeByCategoryChart-container">
                    <h2>Income</h2>
                    <h2>Total: <span id="totalIncome"></span></h2>
                    <canvas id="incomeByCategoryChart" width="400" height="200"></canvas>

                </div>
            </div>


            <div class="income-to-expense-chart-contianer">
                <canvas id="incomeExpensesChart"></canvas>
            </div>



            <div class="transaction-table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Category</th>
                            <th>Amount</th>
                            <th>Origin</th>
                            <th>Destination</th>
                            <th>Description</th>
                            <th>Date</th>
                            <th>Action <button type="button" class="add-transaction-btn" data-id="@Model.financialAccount?.ID"
                                    onclick="addTransactionWindow(this)">+</button></th>
                        </tr>
                    </thead>
                    <tbody>
                        
                        @foreach (var transaction in Model.WebUser.GetTransactionsByAccID(Model.financialAccount?.ID).OrderByDescending(t => t.Date))
                        {
                            <tr>
                                <td>@transaction.Type</td>
                                <td>@transaction.Category</td>
                                <td>
                                    <p class="trans-amount @((transaction.Type == "Expense") ? "expense" : "income")">
                                        @transaction.Amount.ToString().Replace(",", ".")</p>
                                    <style>
                                        .trans-amount.expense {
                                            color: red;
                                        }

                                        .trans-amount.income {
                                            color: greenyellow;
                                        }
                                    </style>
                                </td>
                                <td>@Model?.WebUser.GetAccountNameById(transaction?.Origin)</td>
                                <td>@Model?.WebUser.GetAccountNameById(transaction?.Destination)</td>
                                <td>@transaction?.Description</td>
                                <td>@transaction?.Date</td>
                                <td class="edit-buttons">

                                    <button type="button" onclick="editTransactionWindow(event, this)" data-id="@transaction?.ID"
                                        data-type="@transaction?.Type" data-category="@transaction?.Category"
                                        data-amount="@transaction?.Amount.ToString().Replace(",", ".")" data-origin="@transaction?.Origin"
                                        data-destination="@transaction?.Destination" data-date="@transaction?.Date.ToString("s")"
                                        data-description="@transaction?.Description" data-iscontract="@transaction?.IsContract"
                                        data-cycle="@transaction?.Cycle">üñäÔ∏è</button>
                        
                                    <button type="button" onclick="confirmDeleteTransaction(event, this)"
                                            class="delete-button"
                                            data-uuid="@Model?.financialAccount?.ID" 
                                            data-transid="@transaction?.ID"
                                    >‚ùå</button>                      
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>


            <div class="contract-table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Category</th>
                            <th>Amount</th>
                            <th>Origin</th>
                            <th>Destination</th>
                            <th>Cycle</th>
                            <th>Since</th>
                            <th>Till</th>
                            <th><button type="button" data-id="@Model?.financialAccount?.ID"
                                    onclick="addTransactionWindow(this)">+</button></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null)
                        {
                            @foreach (var contract in Model.WebUser.Contracts)
                            {
                                <tr>
                                    <td>@contract.Type</td>
                                    <td>@contract.Category</td>
                                    <td>
                                        <p class="trans-amount @((contract.Type == "Expense") ? "expense" : "income")">
                                            @contract.Amount.ToString().Replace(",", ".")</p>
                                        <style>
                                            .trans-amount.expense {
                                                color: red;
                                            }

                                            .trans-amount.income {
                                                color: greenyellow;
                                            }
                                        </style>
                                    </td>
                                    <td>@contract.Origin</td>
                                    <td>@contract.Destination</td>
                                    <td>@contract.Cycle</td>
                                    <td>@contract.StartDate</td>
                                    <td>@contract.EndDate</td>
                                    <td><button type="button" class="edit-button" onclick="editContract(event, this)"
                                            data-contractId="@contract.ContractId" data-type="@contract.Type"
                                            data-amount="@contract.Amount.ToString().Replace(",", ".")" data-category="@contract.Category"
                                            data-cycle="@contract.Cycle" data-startDate="@contract.StartDate.ToString("s")"
                                            data-endDate="@contract.EndDate?.ToString("s")" data-accountId="@contract.AccountID"
                                            data-origin="@contract.Origin" data-destination="@contract.Destination">üñäÔ∏è</button>
                                    </td>
                                </tr>
                            }
                        }
                        
                    </tbody>
                </table>
            </div>

            <div class="dark-overlay" id="dark-overlay"></div>

            <div class="confirm-del-transaction-box" id="confirm-del-transaction-box">
                <div class="close-confirm-del-btn-container">
                    <button type="button" class="exit-btn" onclick="closeDeleteTransaction()">X</button>
                </div>
                <div class="confirm-del-text-container">
                    <h3>Are you shure you want to delete this Transaction?</h3>
                    <h4>Note: This CANT be undone!</h4>
                </div>
                <form method="post">
                    <input type="hidden" name="UuId" id="confirm-del-uuid">
                    <input type="hidden" name="TransID"  id="confirm-del-transid"/>

                    <button type="submit" class="delete-button"
                    asp-page-handler="DeleteTransaction">‚ùå</button>
                </form>
            </div>
            
            <div class="edit-contract-container" id="edit-contract-container">
                <button type="button" class="exit-btn" onclick="closeEditContract()">X</button>
                <form method="post" onsubmit="showEditAlert()">

                    <input type="hidden" name="ContractID" id="contract-id" class="contract-ID">
                    <input type="hidden" name="ContractAccID" id="contract-acc-id">

                    <label for="contract-type-slct">Type</label>
                    <select name="Type" id="contract-type-slct" required>
                        <option value="" disabled selected></option>
                        <option value="Income">Income</option>
                        <option value="Expense">Expense</option>
                        <option value="Transfer">Transfer</option>
                    </select>

                    <label for="contract-category-slct">Category</label>
                    <select name="Category" id="contract-category-slct" required>
                        <option value="" disabled selected></option>
                        <option value="Salary" data-type="Income">Salary</option>
                        <option value="Freelance/Consulting" data-type="Income">Freelance/Consulting
                        </option>
                        <option value="Investments" data-type="Income">Investments</option>
                        <option value="Rental Income" data-type="Income">Rental Income</option>
                        <option value="Business Income" data-type="Income">Business Income</option>
                        <option value="Bonuses" data-type="Income">Bonuses</option>
                        <option value="Gifts" data-type="Income">Gifts</option>
                        <option value="Interest Earned" data-type="Income">Interest Earned</option>
                        <option value="Dividends" data-type="Income">Dividends</option>
                        <option value="Other Income" data-type="Income">Other Income</option>

                        <option value="Rent/Mortgage" data-type="Expense">Rent/Mortgage</option>
                        <option value="Utilities (Electricity, Water, Gas)" data-type="Expense">Utilities
                            (Electricity, Water, Gas)</option>
                        <option value="Groceries" data-type="Expense">Groceries</option>
                        <option value="Dining Out" data-type="Expense">Dining Out</option>
                        <option value="Transportation (Fuel, Public Transport)" data-type="Expense">
                            Transportation (Fuel, Public Transport)</option>
                        <option value="Insurance (Health, Car, Home)" data-type="Expense">Insurance (Health,
                            Car, Home)</option>
                        <option value="Medical/Healthcare" data-type="Expense">Medical/Healthcare</option>
                        <option value="Education (Tuition, Books)" data-type="Expense">Education (Tuition,
                            Books)</option>
                        <option value="Entertainment (Movies, Events)" data-type="Expense">Entertainment
                            (Movies, Events)</option>
                        <option value="Subscriptions (Netflix, Gym)" data-type="Expense">Subscriptions
                            (Netflix, Gym)</option>
                        <option value="Travel (Flights, Hotels)" data-type="Expense">Travel (Flights,
                            Hotels)</option>
                        <option value="Clothing" data-type="Expense">Clothing</option>
                        <option value="Personal Care (Haircuts, Spa)" data-type="Expense">Personal Care
                            (Haircuts, Spa)</option>
                        <option value="Household Supplies" data-type="Expense">Household Supplies</option>
                        <option value="Debt Payments (Credit Card, Loans)" data-type="Expense">Debt Payments
                            (Credit Card, Loans)</option>
                        <option value="Savings/Investments" data-type="Expense">Savings/Investments</option>
                        <option value="Charitable Donations" data-type="Expense">Charitable Donations
                        </option>
                        <option value="Pet Care" data-type="Expense">Pet Care</option>
                        <option value="Childcare" data-type="Expense">Childcare</option>
                        <option value="Miscellaneous" data-type="Expense">Miscellaneous</option>

                        <option value="Bank Transfer" data-type="Transfer">Bank Transfer</option>
                        <option value="Cash Withdrawal" data-type="Transfer">Cash Withdrawal</option>
                        <option value="Cash Deposit" data-type="Transfer">Cash Deposit</option>
                        <option value="Crypto Purchase" data-type="Transfer">Crypto Purchase</option>
                        <option value="Crypto Sale" data-type="Transfer">Crypto Sale</option>
                        <option value="Internal Transfer" data-type="Transfer">Internal Transfer</option>
                        <option value="External Transfer" data-type="Transfer">External Transfer</option>
                        <option value="Credit Card Payment" data-type="Transfer">Credit Card Payment
                        </option>
                        <option value="Loan Payment" data-type="Transfer">Loan Payment</option>
                        <option value="Peer-to-Peer Transfer" data-type="Transfer">Peer-to-Peer Transfer
                        </option>
                        <option value="Savings to Checking" data-type="Transfer">Savings to Checking
                        </option>
                        <option value="Checking to Savings" data-type="Transfer">Checking to Savings
                        </option>
                        <option value="Investment to Savings" data-type="Transfer">Investment to Savings
                        </option>
                        <option value="Savings to Investment" data-type="Transfer">Savings to Investment
                        </option>
                    </select>

                    <label for="contract-amount-inp">Amount</label>
                    <input type="number" name="Amount" id="contract-amount-inp" class="contract-amount-inp" step="0.01"
                        min="0" required>


                    <div class="edit-contract-transfer-input-container">
                        <label for="edit-contract-transf-orgin-slct">From</label>
                        <select name="Origin" id="edit-contract-transf-orgin-slct">
                            <option value="" disabled selected></option>
                            <!-- Populate account options dynamically -->
                            @if (Model != null)
                            {
                                @foreach (var bankaccount in Model.WebUser.BankAccounts)
                                {
                                    <option value="@bankaccount.ID">Bankaccount: "@bankaccount.AccountName"</option>
                                }
                                @foreach (var cashAccount in Model.WebUser.CashAccounts)
                                {
                                    <option value="@cashAccount.ID">Cash: "@cashAccount.AccountName"</option>
                                }
                                @foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                                {
                                    <option value="@cryptoWallet.ID">Cryptowallet: "@cryptoWallet.AccountName"</option>
                                }
                                @foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                                {
                                    <option value="@portfolioAccount.ID">Portfolio: "@portfolioAccount.AccountName"
                                    </option>
                                }
                            }
                            
                        </select>

                        <label for="edit-contract-transf-destination-slct">To</label>
                        <select name="Destination" id="edit-contract-transf-destination-slct">
                            <option value="" disabled selected></option>
                            <!-- Populate account options dynamically -->
                            @if (Model != null)
                            {
                                @foreach (var bankaccount in Model.WebUser.BankAccounts)
                                {
                                    <option value="@bankaccount.ID">Bankaccount: "@bankaccount.AccountName"</option>
                                }
                                @foreach (var cashAccount in Model.WebUser.CashAccounts)
                                {
                                    <option value="@cashAccount.ID">Cash: "@cashAccount.AccountName"</option>
                                }
                                @foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                                {
                                    <option value="@cryptoWallet.ID">Cryptowallet: "@cryptoWallet.AccountName"</option>
                                }
                                @foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                                {
                                    <option value="@portfolioAccount.ID">Portfolio: "@portfolioAccount.AccountName"
                                    </option>
                                }
                            }
                            
                        </select>
                    </div>


                    <div class="edit-contract-cycle-slct-container">
                        <label for="edit-contract-cycle-slct">Contract cycle</label>
                        <select name="Cycle" id="edit-contract-cycle-slct" required>
                            @foreach (BillingCycle billingCycle in Enum.GetValues(typeof(BillingCycle)))
                            {
                                <option value="@billingCycle">@billingCycle</option>
                            }
                        </select>
                    </div>

                    <label for="edit-start-date-input">Start Date</label>
                    <input type="datetime-local" name="Date" class="edit-start-date-input"
                        id="edit-start-date-input">

                    <label for="edit-end-date-input">EndDate</label>
                    <input type="datetime-local" name="EndDate" class="edit-end-date-input" id="edit-end-date-input">
                    @if(Model != null)
                    {
                        <input type="hidden" name="UuId" value="@Model.financialAccount?.ID">
                    }
                    <label for="mark-contract-as-finished-chbx">Set contract as ended</label>
                    <input type="checkbox" asp-for="IsFinished" id="mark-contract-as-finished-chbx">

                    <button type="submit" class="save-contract-changes-btn" asp-page-handler="EditContract">Save
                        Changes</button>
                </form>
                <div class="delete-contract-container">
                    <label for="delete-contract-button">Delete Contract(With all past Transactions)</label>
                    <button type="button" class="delete-contract-button" id="delete-contract-button"
                    onclick="confirmDeleteContract()">‚ùå</button>
                </div>
            </div>


            <div class="confirm-del-contract-container" id="confirm-del-contract-container">
                <div>
                    <div class="close-confirm-del-btn-container">
                        <button type="button" class="exit-btn" onclick="closeDeleteContract()">X</button>
                    </div>
                </div>
                <div class="confirm-del-text-container">
                    <h3>Are you shure you want to delete this Transaction?</h3>
                    <h4>Note: This CANT be undone!</h4>
                </div>
                <form method="post">
                    <input type="hidden" name="ContractID" id="del-contract-id" required>
                    <input type="hidden" name="ContractAccID" id="del-contract-acc-id" required>
                    @if(Model != null)
                    {
                        <input type="hidden" name="UuId" value="@Model.financialAccount?.ID" required>
                    }           
                    <button type="submit" class="delete-contract-button" id="delete-contract-button"
                        asp-page-handler="DeleteContract">‚ùå</button>
                </form>
            </div>


            <div class="edit-menu-container" id="edit-menu-container">
                <div class="edit-transaction-exit-btn-container">
                    <button class="exit-btn" onclick="closeEditMenu()">X</button>
                </div>
                <form method="post" onsubmit="showEditAlert()">
                    <input type="hidden" name="TransID" id="edit-Trans-ID" />
                    @if(Model != null)
                    {
                        <input type="hidden" name="AccID" id="account-id" value="@Model.financialAccount?.ID" />
                    }
                    <div class="input-group">
                        <div class="trans-type-slct-container">
                            <label for="edit-type-select">Type</label>
                            <select name="Type" id="edit-type-select" class="edit-type-select" required>
                                <option value="" disabled selected></option>
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                                <option value="Transfer">Transfer</option>
                            </select>
                        </div>
                    </div>

                    <div class="input-group">
                        <div class="edit-transf-input-container">
                            <div class="transf-orgin-slct-container">
                                <label for="edit-transf-orgin-slct">From</label>
                                <select name="Origin" id="edit-transf-orgin-slct">
                                    <!-- Populate account options dynamically -->+
                                    @if(Model != null)
                                    {
                                        @foreach (var bankaccount in Model.WebUser.BankAccounts)
                                        {
                                            <option value="@bankaccount.ID">Bankaccount: "@bankaccount.AccountName"</option>
                                        }
                                        @foreach (var cashAccount in Model.WebUser.CashAccounts)
                                        {
                                            <option value="@cashAccount.ID">Cash: "@cashAccount.AccountName"</option>
                                        }
                                        @foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                                        {
                                            <option value="@cryptoWallet.ID">Cryptowallet: "@cryptoWallet.AccountName"</option>
                                        }
                                        @foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                                        {
                                            <option value="@portfolioAccount.ID">Portfolio: "@portfolioAccount.AccountName"
                                            </option>
                                        }
                                    }
                                </select>
                            </div>

                            <div class="transf-destination-slct-contianer">
                                <label for="edit-transf-destination-slct">To</label>
                                <select name="Destination" id="edit-transf-destination-slct">
                                    <!-- Populate account options dynamically -->
                                    @if(Model != null)
                                    {
                                        @foreach (var bankaccount in Model.WebUser.BankAccounts)
                                        {
                                            <option value="@bankaccount.ID">Bankaccount: "@bankaccount.AccountName"</option>
                                        }
                                        @foreach (var cashAccount in Model.WebUser.CashAccounts)
                                        {
                                            <option value="@cashAccount.ID">Cash: "@cashAccount.AccountName"</option>
                                        }
                                        @foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                                        {
                                            <option value="@cryptoWallet.ID">Cryptowallet: "@cryptoWallet.AccountName"</option>
                                        }
                                        @foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                                        {
                                            <option value="@portfolioAccount.ID">Portfolio: "@portfolioAccount.AccountName"
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="input-group">
                        <div class="trans-category-container">
                            <label for="edit-category-Dropdown">Category</label>
                            <select id="edit-category-Dropdown" class="edit-category-drop" name="Category" required>
                                <option value="" disabled selected></option>
                                <option value="Salary" data-type="Income">Salary</option>
                                <option value="Freelance/Consulting" data-type="Income">Freelance/Consulting
                                </option>
                                <option value="Investments" data-type="Income">Investments</option>
                                <option value="Rental Income" data-type="Income">Rental Income</option>
                                <option value="Business Income" data-type="Income">Business Income</option>
                                <option value="Bonuses" data-type="Income">Bonuses</option>
                                <option value="Gifts" data-type="Income">Gifts</option>
                                <option value="Interest Earned" data-type="Income">Interest Earned</option>
                                <option value="Dividends" data-type="Income">Dividends</option>
                                <option value="Other Income" data-type="Income">Other Income</option>

                                <option value="Rent/Mortgage" data-type="Expense">Rent/Mortgage</option>
                                <option value="Utilities (Electricity, Water, Gas)" data-type="Expense">Utilities
                                    (Electricity, Water, Gas)</option>
                                <option value="Groceries" data-type="Expense">Groceries</option>
                                <option value="Dining Out" data-type="Expense">Dining Out</option>
                                <option value="Transportation (Fuel, Public Transport)" data-type="Expense">
                                    Transportation (Fuel, Public Transport)</option>
                                <option value="Insurance (Health, Car, Home)" data-type="Expense">Insurance (Health,
                                    Car, Home)</option>
                                <option value="Medical/Healthcare" data-type="Expense">Medical/Healthcare</option>
                                <option value="Education (Tuition, Books)" data-type="Expense">Education (Tuition,
                                    Books)</option>
                                <option value="Entertainment (Movies, Events)" data-type="Expense">Entertainment
                                    (Movies, Events)</option>
                                <option value="Subscriptions (Netflix, Gym)" data-type="Expense">Subscriptions
                                    (Netflix, Gym)</option>
                                <option value="Travel (Flights, Hotels)" data-type="Expense">Travel (Flights,
                                    Hotels)</option>
                                <option value="Clothing" data-type="Expense">Clothing</option>
                                <option value="Personal Care (Haircuts, Spa)" data-type="Expense">Personal Care
                                    (Haircuts, Spa)</option>
                                <option value="Household Supplies" data-type="Expense">Household Supplies</option>
                                <option value="Debt Payments (Credit Card, Loans)" data-type="Expense">Debt Payments
                                    (Credit Card, Loans)</option>
                                <option value="Savings/Investments" data-type="Expense">Savings/Investments</option>
                                <option value="Charitable Donations" data-type="Expense">Charitable Donations
                                </option>
                                <option value="Pet Care" data-type="Expense">Pet Care</option>
                                <option value="Childcare" data-type="Expense">Childcare</option>
                                <option value="Miscellaneous" data-type="Expense">Miscellaneous</option>

                                <option value="Bank Transfer" data-type="Transfer">Bank Transfer</option>
                                <option value="Cash Withdrawal" data-type="Transfer">Cash Withdrawal</option>
                                <option value="Cash Deposit" data-type="Transfer">Cash Deposit</option>
                                <option value="Crypto Purchase" data-type="Transfer">Crypto Purchase</option>
                                <option value="Crypto Sale" data-type="Transfer">Crypto Sale</option>
                                <option value="Internal Transfer" data-type="Transfer">Internal Transfer</option>
                                <option value="External Transfer" data-type="Transfer">External Transfer</option>
                                <option value="Credit Card Payment" data-type="Transfer">Credit Card Payment
                                </option>
                                <option value="Loan Payment" data-type="Transfer">Loan Payment</option>
                                <option value="Peer-to-Peer Transfer" data-type="Transfer">Peer-to-Peer Transfer
                                </option>
                                <option value="Savings to Checking" data-type="Transfer">Savings to Checking
                                </option>
                                <option value="Checking to Savings" data-type="Transfer">Checking to Savings
                                </option>
                                <option value="Investment to Savings" data-type="Transfer">Investment to Savings
                                </option>
                                <option value="Savings to Investment" data-type="Transfer">Savings to Investment
                                </option>
                            </select>
                        </div>
                    </div>
                    
                    
                    

                    <div class="input-group">
                        <div class="trans-description-container">
                            <label for="edit-trans-description-inp">Description</label>
                            <input type="text" class="edit-trans-description" id="edit-trans-description-inp"
                                name="Description" required>
                        </div>
                    </div>
                    

                    <div class="input-group">
                        <div class="trans-amount-container">
                            <label for="edit-trans-amount-inp">Amount</label>
                            <input type="number" class="edit-trans-amount-inp" id="edit-trans-amount-inp" name="Amount"
                                step="0.01" min="0" required>
                        </div>
                    </div>
                    

                    <div class="input-group">
                            <div class="trans-date-container">
                            <label for="edit-trans-date-inp">Date</label>
                            <input type="datetime-local" class="edit-trans-date-inp" id="edit-trans-date-inp" name="Date"
                                required>
                        </div>
                    </div>
                    
                    <div class="input-group">
                        <div class="save-transaction-changes-btn-container">
                            @if(Model != null)
                            {
                                <input type="hidden" name="UuId" value="@Model.financialAccount?.ID">
                            }
                            <button type="submit" class="save-transaction-btn" asp-page-handler="EditTransaction">Save</button>
                        </div>
                    </div>
                </form>
            </div>



            <div class="add-transaction-menu" id="add-transaction-menu">
                <div class="add-transaction-menu-exit-btn-container">
                    <button class="exit-btn" onclick="closeTransactionWindow()">X</button>
                </div>
                <form method="post" onsubmit="showAlert()">
                    @if(Model != null)
                    {
                        <input type="hidden" name="AccID" id="account-id" value="@Model.financialAccount?.ID" />
                    }
                    <div class="input-group">
                        <div class="trans-type-slct-container" id="trans-type-slct-container">
                            <label for="trans-type-slct">Transaction Type</label>
                            <select class="trans-type-slct" id="trans-type-slct" name="Type" required>
                                <option value="" selected disabled></option>
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                                <option value="Transfer">Transfer</option>
                            </select>
                        </div>
                    </div>
                    
                    <hr>

                    <div class="input-group">
                        <div class="trans-transf-input-container">
                            <div class="transf-origin-container">
                                <label for="transf-origin-slct">From:</label>
                                <select name="Origin" id="transf-orgini-slct">
                                    @if(Model != null)
                                    {
                                        @foreach (var bankaccount in Model.WebUser.BankAccounts)
                                        {
                                            <option value="@bankaccount.ID">Bankaccount: "@bankaccount.AccountName"</option>
                                        }
                                        @foreach (var cashAccount in Model.WebUser.CashAccounts)
                                        {
                                            <option value="@cashAccount.ID">Cash: "@cashAccount.AccountName"</option>
                                        }
                                        @foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                                        {
                                            <option value="@cryptoWallet.ID">Cryptowallet: "@cryptoWallet.AccountName"</option>
                                        }
                                        @foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                                        {
                                            <option value="@portfolioAccount.ID">Portfolio: "@portfolioAccount.AccountName"
                                            </option>
                                        }
                                    }
                                    
                                </select>
                            </div>

                            <div class="transf-destination-container">
                                <label for="transf-destination-slct">To:</label>
                                <select name="Destination" id="transf-destination-slct">
                                    <option value="" disabled selected></option>
                                    @if(Model != null)
                                    {
                                        @foreach (var bankaccount in Model.WebUser.BankAccounts)
                                        {
                                            <option value="@bankaccount.ID">Bankaccount: "@bankaccount.AccountName"</option>
                                        }
                                        @foreach (var cashAccount in Model.WebUser.CashAccounts)
                                        {
                                            <option value="@cashAccount.ID">Cash: "@cashAccount.AccountName"</option>
                                        }
                                        @foreach (var cryptoWallet in Model.WebUser.CryptoWallets)
                                        {
                                            <option value="@cryptoWallet.ID">Cryptowallet: "@cryptoWallet.AccountName"</option>
                                        }
                                        @foreach (var portfolioAccount in Model.WebUser.PortfolioAccounts)
                                        {
                                            <option value="@portfolioAccount.ID">Portfolio: "@portfolioAccount.AccountName"
                                            </option>
                                        }
                                    }

                                </select>
                            </div>
                        </div>
                    </div>
                    

                    <div class="input-group">
                        <div class="trans-category-container">
                            <label for="trans-category-slct">Category</label>
                            <select name="Category" id="trans-category-slct" required>
                                <option value="" disabled selected></option>
                                <option value="Salary" data-type="Income">Salary</option>
                                <option value="Freelance/Consulting" data-type="Income">Freelance/Consulting
                                </option>
                                <option value="Investments" data-type="Income">Investments</option>
                                <option value="Rental Income" data-type="Income">Rental Income</option>
                                <option value="Business Income" data-type="Income">Business Income</option>
                                <option value="Bonuses" data-type="Income">Bonuses</option>
                                <option value="Gifts" data-type="Income">Gifts</option>
                                <option value="Interest Earned" data-type="Income">Interest Earned</option>
                                <option value="Dividends" data-type="Income">Dividends</option>
                                <option value="Other Income" data-type="Income">Other Income</option>

                                <option value="Rent/Mortgage" data-type="Expense">Rent/Mortgage</option>
                                <option value="Utilities (Electricity, Water, Gas)" data-type="Expense">Utilities
                                    (Electricity, Water, Gas)</option>
                                <option value="Groceries" data-type="Expense">Groceries</option>
                                <option value="Dining Out" data-type="Expense">Dining Out</option>
                                <option value="Transportation (Fuel, Public Transport)" data-type="Expense">
                                    Transportation (Fuel, Public Transport)</option>
                                <option value="Insurance (Health, Car, Home)" data-type="Expense">Insurance (Health,
                                    Car, Home)</option>
                                <option value="Medical/Healthcare" data-type="Expense">Medical/Healthcare</option>
                                <option value="Education (Tuition, Books)" data-type="Expense">Education (Tuition,
                                    Books)</option>
                                <option value="Entertainment (Movies, Events)" data-type="Expense">Entertainment
                                    (Movies, Events)</option>
                                <option value="Subscriptions (Netflix, Gym)" data-type="Expense">Subscriptions
                                    (Netflix, Gym)</option>
                                <option value="Travel (Flights, Hotels)" data-type="Expense">Travel (Flights,
                                    Hotels)</option>
                                <option value="Clothing" data-type="Expense">Clothing</option>
                                <option value="Personal Care (Haircuts, Spa)" data-type="Expense">Personal Care
                                    (Haircuts, Spa)</option>
                                <option value="Household Supplies" data-type="Expense">Household Supplies</option>
                                <option value="Debt Payments (Credit Card, Loans)" data-type="Expense">Debt Payments
                                    (Credit Card, Loans)</option>
                                <option value="Savings/Investments" data-type="Expense">Savings/Investments</option>
                                <option value="Charitable Donations" data-type="Expense">Charitable Donations
                                </option>
                                <option value="Pet Care" data-type="Expense">Pet Care</option>
                                <option value="Childcare" data-type="Expense">Childcare</option>
                                <option value="Miscellaneous" data-type="Expense">Miscellaneous</option>

                                <option value="Bank Transfer" data-type="Transfer">Bank Transfer</option>
                                <option value="Cash Withdrawal" data-type="Transfer">Cash Withdrawal</option>
                                <option value="Cash Deposit" data-type="Transfer">Cash Deposit</option>
                                <option value="Crypto Purchase" data-type="Transfer">Crypto Purchase</option>
                                <option value="Crypto Sale" data-type="Transfer">Crypto Sale</option>
                                <option value="Internal Transfer" data-type="Transfer">Internal Transfer</option>
                                <option value="External Transfer" data-type="Transfer">External Transfer</option>
                                <option value="Credit Card Payment" data-type="Transfer">Credit Card Payment
                                </option>
                                <option value="Loan Payment" data-type="Transfer">Loan Payment</option>
                                <option value="Peer-to-Peer Transfer" data-type="Transfer">Peer-to-Peer Transfer
                                </option>
                                <option value="Savings to Checking" data-type="Transfer">Savings to Checking
                                </option>
                                <option value="Checking to Savings" data-type="Transfer">Checking to Savings
                                </option>
                                <option value="Investment to Savings" data-type="Transfer">Investment to Savings
                                </option>
                                <option value="Savings to Investment" data-type="Transfer">Savings to Investment
                                </option>
                            </select>
                        </div>
                    </div>

                    <hr>
                        
                    <div class="input-group">
                        <div class="trans-description-container">
                            <label for="trans-income-description-inp">Description</label>
                            <input type="text" class="trans-description" id="trans-description-inp" name="Description"
                                required>
                        </div>
                    </div>

                    <hr>

                    <div class="input-group">
                        <div class="trans-amount-container">
                            <label for="trans-amount-inp">Amount</label>
                            <input type="number" class="trans-amount-inp" id="trans-amount-inp" name="Amount"
                                step="0.01" min="0" required>
                        </div>
                    </div>

                        <div class="trans-date-container">
                            <label for="trans-date-inp">Date</label>
                            <input type="datetime-local" class="trans-date-inp" id="trans-date-inp" name="Date"
                                required>
                        </div>

                    <hr>
                            
                    <div class="input-group">
                        <div class="trans-contract-container">
                            <label for="trans-contract-checkbox">Contract</label>
                            <input type="checkbox" asp-for="IsContract" id="trans-contract-checkbox">
                        </div>
                    </div>

                    <div class="input-group">
                        <div class="trans-contract-cycle-container">
                            <label for="contract-cycle-slct">Contract cycle</label>
                            <select name="Cycle" id="contract-cycle-slct" required>

                                @foreach (BillingCycle billingCycle in Enum.GetValues(typeof(BillingCycle)))
                                {
                                    <option value="@billingCycle">@billingCycle</option>
                                }
                            </select>
                                <div class="trans-contract-enddate-container">
                                    <label for="contract-enddate-inp">EndDate</label>
                                    <input type="datetime-local" class="contract-enddate-inp" id="contract-enddate-inp" name="EndDate">
                                </div>
                            <hr>
                        </div>
                    </div>

                    <div class="input-group">
                        <div class="save-transaction-container">
                            @if(Model != null)
                            {
                                <input type="hidden" name="UuId" value="@Model.financialAccount?.ID">
                            }
                            <button type="submit" class="save-transaction-btn" id="save-transaction-btn"
                                asp-page-handler="AddTransaction">Save</button>
                        </div>
                    </div>
                </form>
            </div>
        }
    </div>

    <footer>
        <p>&copy; 2024 Budget Buddy. All rights reserved.</p>
    </footer>


    <script>
        @if(Model == null) throw new Exception("");

        const userEmail = '@Model.WebUser?.Email';
        const accID = '@Model.financialAccount?.ID';
        console.log("User Email:", userEmail);
        console.log("Account ID:", accID);
    </script>
    <script src="/js/accountOverview.js"></script>
</body>

</html>